user nginx;

worker_processes auto;

worker_rlimit_nofile 10240;

# Leave this empty for now
events { worker_connections 1024; }

http {

    resolver 127.0.0.1 ipv6=off;

	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
					  '$status $body_bytes_sent "$http_referer" '
					  '"$http_user_agent"';

	map $http_upgrade $connection_upgrade {
		default upgrade;
		''        close;
	}

	upstream grpcserver {
		# The docker endpoint of your grpc servers, you can have multiple here
		server api:50051;
	}

#     upstream httpserver {
#         # The docker endpoint of your grpc servers, you can have multiple here
#         server api:8080;
#     }

	server {
		listen 80 http2;
		listen 443 ssl http2;

		# Create a certificate that points to the hostname, e.g. nginx for docker
		# $ openssl req -nodes -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -subj '/CN=nginx'
		ssl_certificate     /run/secrets/nginx.cert;
		ssl_certificate_key /run/secrets/nginx.key;

		location /manualflowcontrol.StreamingGreeter {
			# Replace localhost:50051 with the address and port of your gRPC server
			# The 'grpc://' prefix is optional; unencrypted gRPC is the default
			grpc_pass grpcserver;
		}

#         location / {
#             # Replace localhost:50051 with the address and port of your gRPC server
#             # The 'grpc://' prefix is optional; unencrypted gRPC is the default
#             proxy_pass httpserver;
#         }
	}
}
